Convolutional Neural Networks: Application
Welcome to Course 4's second assignment! In this notebook, you will:

Create a mood classifer using the TF Keras Sequential API
Build a ConvNet to identify sign language digits using the TF Keras Functional API
After this assignment you will be able to:

Build and train a ConvNet in TensorFlow for a binary classification problem
Build and train a ConvNet in TensorFlow for a multiclass classification problem
Explain different use cases for the Sequential and Functional APIs
To complete this assignment, you should already be familiar with TensorFlow. If you are not, please refer back to the TensorFlow Tutorial of the third week of Course 2 ("Improving deep neural networks").

Table of Contents
1 - Packages
1.1 - Load the Data and Split the Data into Train/Test Sets
2 - Layers in TF Keras
3 - The Sequential API
3.1 - Create the Sequential Model
Exercise 1 - happyModel
3.2 - Train and Evaluate the Model
4 - The Functional API
4.1 - Load the SIGNS Dataset
4.2 - Split the Data into Train/Test Sets
4.3 - Forward Propagation
Exercise 2 - convolutional_model
4.4 - Train the Model
5 - History Object
6 - Bibliography

1 - Packages
As usual, begin by loading in the packages.

import math
import numpy as np
import h5py
import matplotlib.pyplot as plt
from matplotlib.pyplot import imread
import scipy
from PIL import Image
import pandas as pd
import tensorflow as tf
import tensorflow.keras.layers as tfl
from tensorflow.python.framework import ops
from cnn_utils import *
from test_utils import summary, comparator
​
%matplotlib inline
np.random.seed(1)

1.1 - Load the Data and Split the Data into Train/Test Sets
You'll be using the Happy House dataset for this part of the assignment, which contains images of peoples' faces. Your task will be to build a ConvNet that determines whether the people in the images are smiling or not -- because they only get to enter the house if they're smiling!

X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_happy_dataset()
​
# Normalize image vectors
X_train = X_train_orig/255.
X_test = X_test_orig/255.
​
# Reshape
Y_train = Y_train_orig.T
Y_test = Y_test_orig.T
​
print ("number of training examples = " + str(X_train.shape[0]))
print ("number of test examples = " + str(X_test.shape[0]))
print ("X_train shape: " + str(X_train.shape))
print ("Y_train shape: " + str(Y_train.shape))
print ("X_test shape: " + str(X_test.shape))
print ("Y_test shape: " + str(Y_test.shape))
number of training examples = 600
number of test examples = 150
X_train shape: (600, 64, 64, 3)
Y_train shape: (600, 1)
X_test shape: (150, 64, 64, 3)
Y_test shape: (150, 1)
You can display the images contained in the dataset. Images are 64x64 pixels in RGB format (3 channels).

index = 124
plt.imshow(X_train_orig[index]) #display sample training image
plt.show()


2 - Layers in TF Keras
In the previous assignment, you created layers manually in numpy. In TF Keras, you don't have to write code directly to create layers. Rather, TF Keras has pre-defined layers you can use.

When you create a layer in TF Keras, you are creating a function that takes some input and transforms it into an output you can reuse later. Nice and easy!


3 - The Sequential API
In the previous assignment, you built helper functions using numpy to understand the mechanics behind convolutional neural networks. Most practical applications of deep learning today are built using programming frameworks, which have many built-in functions you can simply call. Keras is a high-level abstraction built on top of TensorFlow, which allows for even more simplified and optimized model creation and training.

For the first part of this assignment, you'll create a model using TF Keras' Sequential API, which allows you to build layer by layer, and is ideal for building models where each layer has exactly one input tensor and one output tensor.

As you'll see, using the Sequential API is simple and straightforward, but is only appropriate for simpler, more straightforward tasks. Later in this notebook you'll spend some time building with a more flexible, powerful alternative: the Functional API.


3.1 - Create the Sequential Model
As mentioned earlier, the TensorFlow Keras Sequential API can be used to build simple models with layer operations that proceed in a sequential order.

You can also add layers incrementally to a Sequential model with the .add() method, or remove them using the .pop() method, much like you would in a regular Python list.

Actually, you can think of a Sequential model as behaving like a list of layers. Like Python lists, Sequential layers are ordered, and the order in which they are specified matters. If your model is non-linear or contains layers with multiple inputs or outputs, a Sequential model wouldn't be the right choice!

For any layer construction in Keras, you'll need to specify the input shape in advance. This is because in Keras, the shape of the weights is based on the shape of the inputs. The weights are only created when the model first sees some input data. Sequential models can be created by passing a list of layers to the Sequential constructor, like you will do in the next assignment.


Exercise 1 - happyModel
Implement the happyModel function below to build the following model: ZEROPAD2D -> CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> FLATTEN -> DENSE. Take help from tf.keras.layers

Also, plug in the following parameters for all the steps:

ZeroPadding2D: padding 3, input shape 64 x 64 x 3
Conv2D: Use 32 7x7 filters, stride 1
BatchNormalization: for axis 3
ReLU
MaxPool2D: Using default parameters
Flatten the previous output.
Fully-connected (Dense) layer: Apply a fully connected layer with 1 neuron and a sigmoid activation.
Hint:

Use tfl as shorthand for tensorflow.keras.layers

# GRADED FUNCTION: happyModel
​
def happyModel():
    """
    Implements the forward propagation for the binary classification model:
    ZEROPAD2D -> CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> FLATTEN -> DENSE
    
    Note that for simplicity and grading purposes, you'll hard-code all the values
    such as the stride and kernel (filter) sizes. 
    Normally, functions should take these values as function parameters.
    
    Arguments:
    None
​
    Returns:
    model -- TF Keras model (object containing the information for the entire training process) 
    """
    model = tf.keras.Sequential()
    ## ZeroPadding2D with padding 3, input shape of 64 x 64 x 3
            
    ## Conv2D with 32 7x7 filters and stride of 1
            
    ## BatchNormalization for axis 3
            
    ## ReLU
            
    ## Max Pooling 2D with default parameters
            
    ## Flatten layer
            
    ## Dense layer with 1 unit for output & 'sigmoid' activation
            
    # YOUR CODE STARTS HERE
    model.add(tf.keras.Input(shape=(64,64,3)))         
    model.add(tfl.ZeroPadding2D(padding=(3, 3)))
    model.add(tfl.Conv2D(filters = 32, kernel_size = (7,7), strides = (1,1)))
    model.add(tfl.BatchNormalization(axis=3))
    model.add(tfl.ReLU())
    model.add(tfl.MaxPooling2D(pool_size=(2,2), padding='valid')) 
    model.add(tfl.Flatten())
    model.add(tfl.Dense(units=1, activation='sigmoid'))
            
    # YOUR CODE ENDS HERE   
    
    return model
happy_model = happyModel()
# Print a summary for each layer
for layer in summary(happy_model):
    print(layer)
    
output = [['ZeroPadding2D', (None, 70, 70, 3), 0, ((3, 3), (3, 3))],
            ['Conv2D', (None, 64, 64, 32), 4736, 'valid', 'linear', 'GlorotUniform'],
            ['BatchNormalization', (None, 64, 64, 32), 128],
            ['ReLU', (None, 64, 64, 32), 0],
            ['MaxPooling2D', (None, 32, 32, 32), 0, (2, 2), (2, 2), 'valid'],
            ['Flatten', (None, 32768), 0],
            ['Dense', (None, 1), 32769, 'sigmoid']]
    
comparator(summary(happy_model), output)
['ZeroPadding2D', (None, 70, 70, 3), 0, ((3, 3), (3, 3))]
['Conv2D', (None, 64, 64, 32), 4736, 'valid', 'linear', 'GlorotUniform']
['BatchNormalization', (None, 64, 64, 32), 128]
['ReLU', (None, 64, 64, 32), 0]
['MaxPooling2D', (None, 32, 32, 32), 0, (2, 2), (2, 2), 'valid']
['Flatten', (None, 32768), 0]
['Dense', (None, 1), 32769, 'sigmoid']
All tests passed!
Now that your model is created, you can compile it for training with an optimizer and loss of your choice. When the string accuracy is specified as a metric, the type of accuracy used will be automatically converted based on the loss function used. This is one of the many optimizations built into TensorFlow that make your life easier! If you'd like to read more on how the compiler operates, check the docs here.

happy_model.compile(optimizer='adam',
                   loss='binary_crossentropy',
                   metrics=['accuracy'])
It's time to check your model's parameters with the .summary() method. This will display the types of layers you have, the shape of the outputs, and how many parameters are in each layer.

happy_model.summary()
Model: "sequential_5"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
zero_padding2d_5 (ZeroPaddin (None, 70, 70, 3)         0         
_________________________________________________________________
conv2d_4 (Conv2D)            (None, 64, 64, 32)        4736      
_________________________________________________________________
batch_normalization_3 (Batch (None, 64, 64, 32)        128       
_________________________________________________________________
re_lu_1 (ReLU)               (None, 64, 64, 32)        0         
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 32, 32, 32)        0         
_________________________________________________________________
flatten (Flatten)            (None, 32768)             0         
_________________________________________________________________
dense (Dense)                (None, 1)                 32769     
=================================================================
Total params: 37,633
Trainable params: 37,569
Non-trainable params: 64
_________________________________________________________________

3.2 - Train and Evaluate the Model
After creating the model, compiling it with your choice of optimizer and loss function, and doing a sanity check on its contents, you are now ready to build!

Simply call .fit() to train. That's it! No need for mini-batching, saving, or complex backpropagation computations. That's all been done for you, as you're using a TensorFlow dataset with the batches specified already. You do have the option to specify epoch number or minibatch size if you like (for example, in the case of an un-batched dataset).

happy_model.fit(X_train, Y_train, epochs=10, batch_size=16)
Epoch 1/10
38/38 [==============================] - 4s 92ms/step - loss: 1.7588 - accuracy: 0.6583
Epoch 2/10
38/38 [==============================] - 3s 87ms/step - loss: 0.2747 - accuracy: 0.8850
Epoch 3/10
38/38 [==============================] - 3s 90ms/step - loss: 0.1503 - accuracy: 0.9417
Epoch 4/10
38/38 [==============================] - 3s 85ms/step - loss: 0.1428 - accuracy: 0.9467
Epoch 5/10
38/38 [==============================] - 3s 87ms/step - loss: 0.1178 - accuracy: 0.9600
Epoch 6/10
38/38 [==============================] - 3s 84ms/step - loss: 0.1830 - accuracy: 0.9267
Epoch 7/10
38/38 [==============================] - 3s 87ms/step - loss: 0.0806 - accuracy: 0.9767
Epoch 8/10
38/38 [==============================] - 3s 87ms/step - loss: 0.0868 - accuracy: 0.9700
Epoch 9/10
38/38 [==============================] - 3s 84ms/step - loss: 0.0954 - accuracy: 0.9733
Epoch 10/10
38/38 [==============================] - 3s 84ms/step - loss: 0.0893 - accuracy: 0.9650
<tensorflow.python.keras.callbacks.History at 0x7fe31a656d10>
After that completes, just use .evaluate() to evaluate against your test set. This function will print the value of the loss function and the performance metrics specified during the compilation of the model. In this case, the binary_crossentropy and the accuracy respectively.

happy_model.evaluate(X_test, Y_test)
5/5 [==============================] - 0s 22ms/step - loss: 0.1840 - accuracy: 0.9133
[0.18397413194179535, 0.9133333563804626]
Easy, right? But what if you need to build a model with shared layers, branches, or multiple inputs and outputs? This is where Sequential, with its beautifully simple yet limited functionality, won't be able to help you.

Next up: Enter the Functional API, your slightly more complex, highly flexible friend.


4 - The Functional API
Welcome to the second half of the assignment, where you'll use Keras' flexible Functional API to build a ConvNet that can differentiate between 6 sign language digits.

The Functional API can handle models with non-linear topology, shared layers, as well as layers with multiple inputs or outputs. Imagine that, where the Sequential API requires the model to move in a linear fashion through its layers, the Functional API allows much more flexibility. Where Sequential is a straight line, a Functional model is a graph, where the nodes of the layers can connect in many more ways than one.

In the visual example below, the one possible direction of the movement Sequential model is shown in contrast to a skip connection, which is just one of the many ways a Functional model can be constructed. A skip connection, as you might have guessed, skips some layer in the network and feeds the output to a later layer in the network. Don't worry, you'll be spending more time with skip connections very soon!




4.1 - Load the SIGNS Dataset
As a reminder, the SIGNS dataset is a collection of 6 signs representing numbers from 0 to 5.

# Loading the data (signs)
X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_signs_dataset()

The next cell will show you an example of a labelled image in the dataset. Feel free to change the value of index below and re-run to see different examples.

# Example of an image from the dataset
index = 9
plt.imshow(X_train_orig[index])
print ("y = " + str(np.squeeze(Y_train_orig[:, index])))
y = 4


4.2 - Split the Data into Train/Test Sets
In Course 2, you built a fully-connected network for this dataset. But since this is an image dataset, it is more natural to apply a ConvNet to it.

To get started, let's examine the shapes of your data.

X_train = X_train_orig/255.
X_test = X_test_orig/255.
Y_train = convert_to_one_hot(Y_train_orig, 6).T
Y_test = convert_to_one_hot(Y_test_orig, 6).T
print ("number of training examples = " + str(X_train.shape[0]))
print ("number of test examples = " + str(X_test.shape[0]))
print ("X_train shape: " + str(X_train.shape))
print ("Y_train shape: " + str(Y_train.shape))
print ("X_test shape: " + str(X_test.shape))
print ("Y_test shape: " + str(Y_test.shape))
number of training examples = 1080
number of test examples = 120
X_train shape: (1080, 64, 64, 3)
Y_train shape: (1080, 6)
X_test shape: (120, 64, 64, 3)
Y_test shape: (120, 6)

4.3 - Forward Propagation
In TensorFlow, there are built-in functions that implement the convolution steps for you. By now, you should be familiar with how TensorFlow builds computational graphs. In the Functional API, you create a graph of layers. This is what allows such great flexibility.

However, the following model could also be defined using the Sequential API since the information flow is on a single line. But don't deviate. What we want you to learn is to use the functional API.

Begin building your graph of layers by creating an input node that functions as a callable object:

input_img = tf.keras.Input(shape=input_shape):
Then, create a new node in the graph of layers by calling a layer on the input_img object:

tf.keras.layers.Conv2D(filters= ... , kernel_size= ... , padding='same')(input_img): Read the full documentation on Conv2D.

tf.keras.layers.MaxPool2D(pool_size=(f, f), strides=(s, s), padding='same'): MaxPool2D() downsamples your input using a window of size (f, f) and strides of size (s, s) to carry out max pooling over each window. For max pooling, you usually operate on a single example at a time and a single channel at a time. Read the full documentation on MaxPool2D.

tf.keras.layers.ReLU(): computes the elementwise ReLU of Z (which can be any shape). You can read the full documentation on ReLU.

tf.keras.layers.Flatten(): given a tensor "P", this function takes each training (or test) example in the batch and flattens it into a 1D vector.

If a tensor P has the shape (batch_size,h,w,c), it returns a flattened tensor with shape (batch_size, k), where 𝑘=ℎ×𝑤×𝑐. "k" equals the product of all the dimension sizes other than the first dimension.

For example, given a tensor with dimensions [100, 2, 3, 4], it flattens the tensor to be of shape [100, 24], where 24 = 2 * 3 * 4. You can read the full documentation on Flatten.

tf.keras.layers.Dense(units= ... , activation='softmax')(F): given the flattened input F, it returns the output computed using a fully connected layer. You can read the full documentation on Dense.

In the last function above (tf.keras.layers.Dense()), the fully connected layer automatically initializes weights in the graph and keeps on training them as you train the model. Hence, you did not need to initialize those weights when initializing the parameters.

Lastly, before creating the model, you'll need to define the output using the last of the function's compositions (in this example, a Dense layer):

outputs = tf.keras.layers.Dense(units=6, activation='softmax')(F)
Window, kernel, filter, pool
The words "kernel" and "filter" are used to refer to the same thing. The word "filter" accounts for the amount of "kernels" that will be used in a single convolution layer. "Pool" is the name of the operation that takes the max or average value of the kernels.

This is why the parameter pool_size refers to kernel_size, and you use (f,f) to refer to the filter size.

Pool size and kernel size refer to the same thing in different objects - They refer to the shape of the window where the operation takes place.


Exercise 2 - convolutional_model
Implement the convolutional_model function below to build the following model: CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> DENSE. Use the functions above!

Also, plug in the following parameters for all the steps:

Conv2D: Use 8 4 by 4 filters, stride 1, padding is "SAME"
ReLU
MaxPool2D: Use an 8 by 8 filter size and an 8 by 8 stride, padding is "SAME"
Conv2D: Use 16 2 by 2 filters, stride 1, padding is "SAME"
ReLU
MaxPool2D: Use a 4 by 4 filter size and a 4 by 4 stride, padding is "SAME"
Flatten the previous output.
Fully-connected (Dense) layer: Apply a fully connected layer with 6 neurons and a softmax activation.
# GRADED FUNCTION: convolutional_model
​
def convolutional_model(input_shape):
    """
    Implements the forward propagation for the model:
    CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> DENSE
    
    Note that for simplicity and grading purposes, you'll hard-code some values
    such as the stride and kernel (filter) sizes. 
    Normally, functions should take these values as function parameters.
    
    Arguments:
    input_img -- input dataset, of shape (input_shape)
​
    Returns:
    model -- TF Keras model (object containing the information for the entire training process) 
    """
​
    input_img = tf.keras.Input(shape=input_shape)
    ## CONV2D: 8 filters 4x4, stride of 1, padding 'SAME'
    # Z1 = None
    ## RELU
    # A1 = None
    ## MAXPOOL: window 8x8, stride 8, padding 'SAME'
    # P1 = None
    ## CONV2D: 16 filters 2x2, stride 1, padding 'SAME'
    # Z2 = None
    ## RELU
    # A2 = None
    ## MAXPOOL: window 4x4, stride 4, padding 'SAME'
    # P2 = None
    ## FLATTEN
    # F = None
    ## Dense layer
    ## 6 neurons in output layer. Hint: one of the arguments should be "activation='softmax'" 
    # outputs = None
    # YOUR CODE STARTS HERE
    input_img = tf.keras.Input(shape=input_shape)
    Z1 = tf.keras.layers.Conv2D(filters= 8 , kernel_size= (4,4), strides=(1, 1), padding='same')(input_img)
    layer = tf.keras.layers.ReLU()
    A1 = layer(Z1)
​
    max_pool_2d = tf.keras.layers.MaxPooling2D(pool_size=(8,8),strides=(8, 8), padding='SAME')  
    P1 = max_pool_2d(A1)
    Z2= tf.keras.layers.Conv2D(filters= 16 , kernel_size= (2,2) , padding='same')(P1)
    layer = tf.keras.layers.ReLU()
    A2 = layer(Z2)
    max_pool_2d_2 = tf.keras.layers.MaxPooling2D(pool_size=(4, 4),strides=(4, 4), padding='SAME')  
    P2 = max_pool_2d_2(A2)
    F = tf.keras.layers.Flatten()(P2)
    outputs = tf.keras.layers.Dense(units=6, activation='softmax')(F)
​
    
    # YOUR CODE ENDS HERE
    model = tf.keras.Model(inputs=input_img, outputs=outputs)
    return model
conv_model = convolutional_model((64, 64, 3))
conv_model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
conv_model.summary()
    
output = [['InputLayer', [(None, 64, 64, 3)], 0],
        ['Conv2D', (None, 64, 64, 8), 392, 'same', 'linear', 'GlorotUniform'],
        ['ReLU', (None, 64, 64, 8), 0],
        ['MaxPooling2D', (None, 8, 8, 8), 0, (8, 8), (8, 8), 'same'],
        ['Conv2D', (None, 8, 8, 16), 528, 'same', 'linear', 'GlorotUniform'],
        ['ReLU', (None, 8, 8, 16), 0],
        ['MaxPooling2D', (None, 2, 2, 16), 0, (4, 4), (4, 4), 'same'],
        ['Flatten', (None, 64), 0],
        ['Dense', (None, 6), 390, 'softmax']]
    
comparator(summary(conv_model), output)
Model: "functional_1"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
input_2 (InputLayer)         [(None, 64, 64, 3)]       0         
_________________________________________________________________
conv2d (Conv2D)              (None, 64, 64, 8)         392       
_________________________________________________________________
re_lu (ReLU)                 (None, 64, 64, 8)         0         
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 8, 8, 8)           0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 8, 8, 16)          528       
_________________________________________________________________
re_lu_1 (ReLU)               (None, 8, 8, 16)          0         
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 2, 2, 16)          0         
_________________________________________________________________
flatten (Flatten)            (None, 64)                0         
_________________________________________________________________
dense (Dense)                (None, 6)                 390       
=================================================================
Total params: 1,310
Trainable params: 1,310
Non-trainable params: 0
_________________________________________________________________
All tests passed!
Both the Sequential and Functional APIs return a TF Keras model object. The only difference is how inputs are handled inside the object model!


4.4 - Train the Model
train_dataset = tf.data.Dataset.from_tensor_slices((X_train, Y_train)).batch(64)
test_dataset = tf.data.Dataset.from_tensor_slices((X_test, Y_test)).batch(64)
history = conv_model.fit(train_dataset, epochs=100, validation_data=test_dataset)
Epoch 1/100
17/17 [==============================] - 2s 114ms/step - loss: 1.8137 - accuracy: 0.1648 - val_loss: 1.7904 - val_accuracy: 0.1667
Epoch 2/100
17/17 [==============================] - 2s 107ms/step - loss: 1.7883 - accuracy: 0.1796 - val_loss: 1.7836 - val_accuracy: 0.1750
Epoch 3/100
17/17 [==============================] - 2s 106ms/step - loss: 1.7798 - accuracy: 0.2380 - val_loss: 1.7760 - val_accuracy: 0.2667
Epoch 4/100
17/17 [==============================] - 2s 106ms/step - loss: 1.7714 - accuracy: 0.2778 - val_loss: 1.7677 - val_accuracy: 0.2917
Epoch 5/100
17/17 [==============================] - 2s 112ms/step - loss: 1.7596 - accuracy: 0.3491 - val_loss: 1.7580 - val_accuracy: 0.3583
Epoch 6/100
17/17 [==============================] - 2s 106ms/step - loss: 1.7450 - accuracy: 0.3861 - val_loss: 1.7461 - val_accuracy: 0.3833
Epoch 7/100
17/17 [==============================] - 2s 106ms/step - loss: 1.7276 - accuracy: 0.4102 - val_loss: 1.7313 - val_accuracy: 0.3583
Epoch 8/100
17/17 [==============================] - 2s 106ms/step - loss: 1.7064 - accuracy: 0.4167 - val_loss: 1.7141 - val_accuracy: 0.3833
Epoch 9/100
17/17 [==============================] - 2s 106ms/step - loss: 1.6808 - accuracy: 0.4222 - val_loss: 1.6942 - val_accuracy: 0.3833
Epoch 10/100
17/17 [==============================] - 2s 106ms/step - loss: 1.6517 - accuracy: 0.4250 - val_loss: 1.6706 - val_accuracy: 0.3833
Epoch 11/100
17/17 [==============================] - 2s 102ms/step - loss: 1.6188 - accuracy: 0.4296 - val_loss: 1.6452 - val_accuracy: 0.3583
Epoch 12/100
17/17 [==============================] - 2s 106ms/step - loss: 1.5840 - accuracy: 0.4306 - val_loss: 1.6179 - val_accuracy: 0.3583
Epoch 13/100
17/17 [==============================] - 2s 106ms/step - loss: 1.5474 - accuracy: 0.4315 - val_loss: 1.5912 - val_accuracy: 0.3917
Epoch 14/100
17/17 [==============================] - 2s 106ms/step - loss: 1.5103 - accuracy: 0.4407 - val_loss: 1.5596 - val_accuracy: 0.3833
Epoch 15/100
17/17 [==============================] - 2s 106ms/step - loss: 1.4720 - accuracy: 0.4657 - val_loss: 1.5269 - val_accuracy: 0.4000
Epoch 16/100
17/17 [==============================] - 2s 106ms/step - loss: 1.4343 - accuracy: 0.4870 - val_loss: 1.4926 - val_accuracy: 0.4000
Epoch 17/100
17/17 [==============================] - 2s 106ms/step - loss: 1.3967 - accuracy: 0.5009 - val_loss: 1.4611 - val_accuracy: 0.4250
Epoch 18/100
17/17 [==============================] - 2s 111ms/step - loss: 1.3596 - accuracy: 0.5157 - val_loss: 1.4292 - val_accuracy: 0.4500
Epoch 19/100
17/17 [==============================] - 2s 106ms/step - loss: 1.3223 - accuracy: 0.5278 - val_loss: 1.3956 - val_accuracy: 0.4667
Epoch 20/100
17/17 [==============================] - 2s 106ms/step - loss: 1.2853 - accuracy: 0.5426 - val_loss: 1.3634 - val_accuracy: 0.4583
Epoch 21/100
17/17 [==============================] - 2s 111ms/step - loss: 1.2486 - accuracy: 0.5574 - val_loss: 1.3315 - val_accuracy: 0.5000
Epoch 22/100
17/17 [==============================] - 2s 105ms/step - loss: 1.2111 - accuracy: 0.5759 - val_loss: 1.2989 - val_accuracy: 0.5083
Epoch 23/100
17/17 [==============================] - 2s 106ms/step - loss: 1.1752 - accuracy: 0.5852 - val_loss: 1.2634 - val_accuracy: 0.5333
Epoch 24/100
17/17 [==============================] - 2s 107ms/step - loss: 1.1420 - accuracy: 0.6000 - val_loss: 1.2345 - val_accuracy: 0.5333
Epoch 25/100
17/17 [==============================] - 2s 106ms/step - loss: 1.1085 - accuracy: 0.6213 - val_loss: 1.2047 - val_accuracy: 0.5500
Epoch 26/100
17/17 [==============================] - 2s 106ms/step - loss: 1.0777 - accuracy: 0.6398 - val_loss: 1.1726 - val_accuracy: 0.5583
Epoch 27/100
17/17 [==============================] - 2s 107ms/step - loss: 1.0492 - accuracy: 0.6509 - val_loss: 1.1436 - val_accuracy: 0.5583
Epoch 28/100
17/17 [==============================] - 2s 106ms/step - loss: 1.0203 - accuracy: 0.6611 - val_loss: 1.1166 - val_accuracy: 0.5417
Epoch 29/100
17/17 [==============================] - 2s 107ms/step - loss: 0.9915 - accuracy: 0.6759 - val_loss: 1.0830 - val_accuracy: 0.5917
Epoch 30/100
17/17 [==============================] - 2s 106ms/step - loss: 0.9685 - accuracy: 0.6926 - val_loss: 1.0552 - val_accuracy: 0.6000
Epoch 31/100
17/17 [==============================] - 2s 106ms/step - loss: 0.9431 - accuracy: 0.7009 - val_loss: 1.0295 - val_accuracy: 0.5833
Epoch 32/100
17/17 [==============================] - 2s 111ms/step - loss: 0.9177 - accuracy: 0.7102 - val_loss: 1.0023 - val_accuracy: 0.6083
Epoch 33/100
17/17 [==============================] - 2s 106ms/step - loss: 0.8972 - accuracy: 0.7093 - val_loss: 0.9801 - val_accuracy: 0.6167
Epoch 34/100
17/17 [==============================] - 2s 106ms/step - loss: 0.8764 - accuracy: 0.7222 - val_loss: 0.9604 - val_accuracy: 0.6333
Epoch 35/100
17/17 [==============================] - 2s 106ms/step - loss: 0.8561 - accuracy: 0.7278 - val_loss: 0.9403 - val_accuracy: 0.6417
Epoch 36/100
17/17 [==============================] - 2s 106ms/step - loss: 0.8385 - accuracy: 0.7324 - val_loss: 0.9222 - val_accuracy: 0.6500
Epoch 37/100
17/17 [==============================] - 2s 106ms/step - loss: 0.8214 - accuracy: 0.7426 - val_loss: 0.9062 - val_accuracy: 0.6500
Epoch 38/100
17/17 [==============================] - 2s 106ms/step - loss: 0.8047 - accuracy: 0.7472 - val_loss: 0.8905 - val_accuracy: 0.6667
Epoch 39/100
17/17 [==============================] - 2s 106ms/step - loss: 0.7895 - accuracy: 0.7519 - val_loss: 0.8759 - val_accuracy: 0.6750
Epoch 40/100
17/17 [==============================] - 2s 106ms/step - loss: 0.7747 - accuracy: 0.7583 - val_loss: 0.8624 - val_accuracy: 0.7000
Epoch 41/100
17/17 [==============================] - 2s 106ms/step - loss: 0.7612 - accuracy: 0.7611 - val_loss: 0.8492 - val_accuracy: 0.7167
Epoch 42/100
17/17 [==============================] - 2s 112ms/step - loss: 0.7480 - accuracy: 0.7639 - val_loss: 0.8367 - val_accuracy: 0.7250
Epoch 43/100
17/17 [==============================] - 2s 106ms/step - loss: 0.7355 - accuracy: 0.7657 - val_loss: 0.8246 - val_accuracy: 0.7250
Epoch 44/100
17/17 [==============================] - 2s 106ms/step - loss: 0.7238 - accuracy: 0.7694 - val_loss: 0.8142 - val_accuracy: 0.7333
Epoch 45/100
17/17 [==============================] - 2s 111ms/step - loss: 0.7127 - accuracy: 0.7750 - val_loss: 0.8039 - val_accuracy: 0.7333
Epoch 46/100
17/17 [==============================] - 2s 107ms/step - loss: 0.7021 - accuracy: 0.7806 - val_loss: 0.7946 - val_accuracy: 0.7167
Epoch 47/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6919 - accuracy: 0.7806 - val_loss: 0.7866 - val_accuracy: 0.7167
Epoch 48/100
17/17 [==============================] - 2s 112ms/step - loss: 0.6823 - accuracy: 0.7806 - val_loss: 0.7787 - val_accuracy: 0.7250
Epoch 49/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6728 - accuracy: 0.7843 - val_loss: 0.7712 - val_accuracy: 0.7250
Epoch 50/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6637 - accuracy: 0.7861 - val_loss: 0.7642 - val_accuracy: 0.7250
Epoch 51/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6549 - accuracy: 0.7898 - val_loss: 0.7575 - val_accuracy: 0.7333
Epoch 52/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6466 - accuracy: 0.7917 - val_loss: 0.7506 - val_accuracy: 0.7250
Epoch 53/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6383 - accuracy: 0.7944 - val_loss: 0.7434 - val_accuracy: 0.7250
Epoch 54/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6304 - accuracy: 0.7954 - val_loss: 0.7370 - val_accuracy: 0.7333
Epoch 55/100
17/17 [==============================] - 2s 111ms/step - loss: 0.6225 - accuracy: 0.7954 - val_loss: 0.7313 - val_accuracy: 0.7417
Epoch 56/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6151 - accuracy: 0.7963 - val_loss: 0.7261 - val_accuracy: 0.7417
Epoch 57/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6079 - accuracy: 0.8028 - val_loss: 0.7210 - val_accuracy: 0.7417
Epoch 58/100
17/17 [==============================] - 2s 106ms/step - loss: 0.6008 - accuracy: 0.8028 - val_loss: 0.7154 - val_accuracy: 0.7417
Epoch 59/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5938 - accuracy: 0.8037 - val_loss: 0.7119 - val_accuracy: 0.7417
Epoch 60/100
17/17 [==============================] - 2s 107ms/step - loss: 0.5873 - accuracy: 0.8056 - val_loss: 0.7080 - val_accuracy: 0.7417
Epoch 61/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5809 - accuracy: 0.8065 - val_loss: 0.7039 - val_accuracy: 0.7500
Epoch 62/100
17/17 [==============================] - 2s 107ms/step - loss: 0.5746 - accuracy: 0.8083 - val_loss: 0.7008 - val_accuracy: 0.7667
Epoch 63/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5686 - accuracy: 0.8111 - val_loss: 0.6963 - val_accuracy: 0.7667
Epoch 64/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5626 - accuracy: 0.8120 - val_loss: 0.6932 - val_accuracy: 0.7667
Epoch 65/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5571 - accuracy: 0.8130 - val_loss: 0.6901 - val_accuracy: 0.7667
Epoch 66/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5517 - accuracy: 0.8148 - val_loss: 0.6864 - val_accuracy: 0.7667
Epoch 67/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5462 - accuracy: 0.8185 - val_loss: 0.6841 - val_accuracy: 0.7667
Epoch 68/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5412 - accuracy: 0.8194 - val_loss: 0.6811 - val_accuracy: 0.7667
Epoch 69/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5362 - accuracy: 0.8241 - val_loss: 0.6781 - val_accuracy: 0.7667
Epoch 70/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5311 - accuracy: 0.8269 - val_loss: 0.6750 - val_accuracy: 0.7667
Epoch 71/100
17/17 [==============================] - 2s 107ms/step - loss: 0.5262 - accuracy: 0.8287 - val_loss: 0.6724 - val_accuracy: 0.7667
Epoch 72/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5216 - accuracy: 0.8315 - val_loss: 0.6692 - val_accuracy: 0.7667
Epoch 73/100
17/17 [==============================] - 2s 100ms/step - loss: 0.5166 - accuracy: 0.8324 - val_loss: 0.6670 - val_accuracy: 0.7667
Epoch 74/100
17/17 [==============================] - 2s 106ms/step - loss: 0.5125 - accuracy: 0.8352 - val_loss: 0.6632 - val_accuracy: 0.7667
Epoch 75/100
17/17 [==============================] - 2s 111ms/step - loss: 0.5078 - accuracy: 0.8389 - val_loss: 0.6605 - val_accuracy: 0.7667
Epoch 76/100
17/17 [==============================] - 2s 111ms/step - loss: 0.5036 - accuracy: 0.8389 - val_loss: 0.6567 - val_accuracy: 0.7667
Epoch 77/100
17/17 [==============================] - 2s 111ms/step - loss: 0.4991 - accuracy: 0.8389 - val_loss: 0.6536 - val_accuracy: 0.7667
Epoch 78/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4948 - accuracy: 0.8389 - val_loss: 0.6516 - val_accuracy: 0.7750
Epoch 79/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4909 - accuracy: 0.8426 - val_loss: 0.6489 - val_accuracy: 0.7750
Epoch 80/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4867 - accuracy: 0.8426 - val_loss: 0.6463 - val_accuracy: 0.7750
Epoch 81/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4828 - accuracy: 0.8435 - val_loss: 0.6435 - val_accuracy: 0.7750
Epoch 82/100
17/17 [==============================] - 2s 100ms/step - loss: 0.4790 - accuracy: 0.8454 - val_loss: 0.6407 - val_accuracy: 0.7667
Epoch 83/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4751 - accuracy: 0.8463 - val_loss: 0.6386 - val_accuracy: 0.7667
Epoch 84/100
17/17 [==============================] - 2s 100ms/step - loss: 0.4715 - accuracy: 0.8481 - val_loss: 0.6356 - val_accuracy: 0.7667
Epoch 85/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4677 - accuracy: 0.8519 - val_loss: 0.6326 - val_accuracy: 0.7667
Epoch 86/100
17/17 [==============================] - 2s 111ms/step - loss: 0.4642 - accuracy: 0.8528 - val_loss: 0.6300 - val_accuracy: 0.7667
Epoch 87/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4607 - accuracy: 0.8528 - val_loss: 0.6278 - val_accuracy: 0.7667
Epoch 88/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4572 - accuracy: 0.8546 - val_loss: 0.6248 - val_accuracy: 0.7667
Epoch 89/100
17/17 [==============================] - 2s 107ms/step - loss: 0.4540 - accuracy: 0.8556 - val_loss: 0.6221 - val_accuracy: 0.7667
Epoch 90/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4508 - accuracy: 0.8583 - val_loss: 0.6188 - val_accuracy: 0.7667
Epoch 91/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4473 - accuracy: 0.8593 - val_loss: 0.6164 - val_accuracy: 0.7667
Epoch 92/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4443 - accuracy: 0.8593 - val_loss: 0.6133 - val_accuracy: 0.7667
Epoch 93/100
17/17 [==============================] - 2s 107ms/step - loss: 0.4410 - accuracy: 0.8602 - val_loss: 0.6108 - val_accuracy: 0.7667
Epoch 94/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4382 - accuracy: 0.8630 - val_loss: 0.6076 - val_accuracy: 0.7667
Epoch 95/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4351 - accuracy: 0.8620 - val_loss: 0.6049 - val_accuracy: 0.7583
Epoch 96/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4321 - accuracy: 0.8657 - val_loss: 0.6015 - val_accuracy: 0.7583
Epoch 97/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4295 - accuracy: 0.8657 - val_loss: 0.5980 - val_accuracy: 0.7583
Epoch 98/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4264 - accuracy: 0.8667 - val_loss: 0.5951 - val_accuracy: 0.7583
Epoch 99/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4238 - accuracy: 0.8676 - val_loss: 0.5912 - val_accuracy: 0.7583
Epoch 100/100
17/17 [==============================] - 2s 106ms/step - loss: 0.4209 - accuracy: 0.8685 - val_loss: 0.5875 - val_accuracy: 0.7583

5 - History Object
The history object is an output of the .fit() operation, and provides a record of all the loss and metric values in memory. It's stored as a dictionary that you can retrieve at history.history:

history.history
{'loss': [1.8136852979660034,
  1.7883033752441406,
  1.7797698974609375,
  1.771416425704956,
  1.7595734596252441,
  1.7450380325317383,
  1.7275598049163818,
  1.7063978910446167,
  1.6807588338851929,
  1.6516755819320679,
  1.6188409328460693,
  1.5839506387710571,
  1.5474048852920532,
  1.5102710723876953,
  1.4720033407211304,
  1.4343140125274658,
  1.3966939449310303,
  1.3595952987670898,
  1.3223356008529663,
  1.285313367843628,
  1.2485814094543457,
  1.2111221551895142,
  1.1752122640609741,
  1.1419570446014404,
  1.108486294746399,
  1.0776814222335815,
  1.0491533279418945,
  1.0202786922454834,
  0.9915449619293213,
  0.9685021042823792,
  0.943148672580719,
  0.9176658987998962,
  0.8971511721611023,
  0.8764059543609619,
  0.8561108112335205,
  0.8384959101676941,
  0.8213540315628052,
  0.8046927452087402,
  0.789549708366394,
  0.7746979594230652,
  0.7611559629440308,
  0.7479621767997742,
  0.735528826713562,
  0.7238287925720215,
  0.7127318978309631,
  0.7020790576934814,
  0.6919160485267639,
  0.6823262572288513,
  0.6728054881095886,
  0.6637342572212219,
  0.654892086982727,
  0.6466113924980164,
  0.6383001804351807,
  0.6304229497909546,
  0.6224926114082336,
  0.615146815776825,
  0.6078897714614868,
  0.6008442044258118,
  0.5938060283660889,
  0.5872646570205688,
  0.5809068083763123,
  0.5745918154716492,
  0.5686356425285339,
  0.5626285076141357,
  0.5571337938308716,
  0.5516524910926819,
  0.5462161302566528,
  0.5412068963050842,
  0.536166250705719,
  0.5310739874839783,
  0.5262117385864258,
  0.5215618014335632,
  0.5166109204292297,
  0.512519121170044,
  0.5077760815620422,
  0.5035862326622009,
  0.4990566670894623,
  0.49482426047325134,
  0.4908740520477295,
  0.4867093563079834,
  0.4828295111656189,
  0.47898560762405396,
  0.47507286071777344,
  0.47154924273490906,
  0.4677222967147827,
  0.4642341136932373,
  0.46069660782814026,
  0.45718804001808167,
  0.4540245532989502,
  0.45076069235801697,
  0.44730430841445923,
  0.4443199932575226,
  0.44104230403900146,
  0.43824803829193115,
  0.4350799024105072,
  0.4320944845676422,
  0.4294801652431488,
  0.42638087272644043,
  0.4237504303455353,
  0.4209122061729431],
 'accuracy': [0.1648148149251938,
  0.1796296238899231,
  0.23796296119689941,
  0.2777777910232544,
  0.3490740656852722,
  0.3861111104488373,
  0.41018518805503845,
  0.4166666567325592,
  0.42222222685813904,
  0.42500001192092896,
  0.4296296238899231,
  0.4305555522441864,
  0.4314814805984497,
  0.4407407343387604,
  0.46574074029922485,
  0.4870370328426361,
  0.5009258985519409,
  0.5157407522201538,
  0.5277777910232544,
  0.5425925850868225,
  0.5574073791503906,
  0.5759259462356567,
  0.585185170173645,
  0.6000000238418579,
  0.6212962865829468,
  0.6398147940635681,
  0.6509259343147278,
  0.6611111164093018,
  0.6759259104728699,
  0.6925926208496094,
  0.7009259462356567,
  0.710185170173645,
  0.7092592716217041,
  0.7222222089767456,
  0.7277777791023254,
  0.7324073910713196,
  0.7425925731658936,
  0.7472222447395325,
  0.7518518567085266,
  0.7583333253860474,
  0.7611111402511597,
  0.7638888955116272,
  0.7657407522201538,
  0.769444465637207,
  0.7749999761581421,
  0.7805555462837219,
  0.7805555462837219,
  0.7805555462837219,
  0.7842592597007751,
  0.7861111164093018,
  0.789814829826355,
  0.7916666865348816,
  0.7944444417953491,
  0.7953703999519348,
  0.7953703999519348,
  0.7962962985038757,
  0.8027777671813965,
  0.8027777671813965,
  0.8037037253379822,
  0.8055555820465088,
  0.8064814805984497,
  0.8083333373069763,
  0.8111110925674438,
  0.8120370507240295,
  0.8129629492759705,
  0.8148148059844971,
  0.8185185194015503,
  0.8194444179534912,
  0.8240740895271301,
  0.8268518447875977,
  0.8287037014961243,
  0.8314814567565918,
  0.8324074149131775,
  0.835185170173645,
  0.8388888835906982,
  0.8388888835906982,
  0.8388888835906982,
  0.8388888835906982,
  0.8425925970077515,
  0.8425925970077515,
  0.8435184955596924,
  0.845370352268219,
  0.8462963104248047,
  0.8481481671333313,
  0.8518518805503845,
  0.8527777791023254,
  0.8527777791023254,
  0.854629635810852,
  0.855555534362793,
  0.8583333492279053,
  0.8592592477798462,
  0.8592592477798462,
  0.8601852059364319,
  0.8629629611968994,
  0.8620370626449585,
  0.8657407164573669,
  0.8657407164573669,
  0.8666666746139526,
  0.8675925731658936,
  0.8685185313224792],
 'val_loss': [1.7903978824615479,
  1.783617615699768,
  1.7759721279144287,
  1.767731785774231,
  1.758025884628296,
  1.7460519075393677,
  1.7313398122787476,
  1.7141057252883911,
  1.6941840648651123,
  1.6706186532974243,
  1.6451828479766846,
  1.617865800857544,
  1.591235876083374,
  1.5595672130584717,
  1.5268648862838745,
  1.492572546005249,
  1.4610745906829834,
  1.429162859916687,
  1.395642638206482,
  1.3633792400360107,
  1.331470012664795,
  1.2988988161087036,
  1.263434648513794,
  1.234496831893921,
  1.2047327756881714,
  1.1725817918777466,
  1.143586277961731,
  1.1166456937789917,
  1.0829739570617676,
  1.0551685094833374,
  1.0294584035873413,
  1.002302646636963,
  0.9800857305526733,
  0.9604061245918274,
  0.9403225183486938,
  0.9222063422203064,
  0.9061786532402039,
  0.890454113483429,
  0.875869870185852,
  0.8624147772789001,
  0.8492326140403748,
  0.8366854786872864,
  0.8246318101882935,
  0.8142138719558716,
  0.8039478063583374,
  0.7946399450302124,
  0.7865852117538452,
  0.7787107825279236,
  0.7711607813835144,
  0.7642346620559692,
  0.7574971914291382,
  0.7505759000778198,
  0.7434415817260742,
  0.7369701862335205,
  0.7313232421875,
  0.7260832190513611,
  0.7210399508476257,
  0.7153882384300232,
  0.7119315266609192,
  0.7079654335975647,
  0.703921914100647,
  0.700831949710846,
  0.6962918639183044,
  0.6932452917098999,
  0.6900637149810791,
  0.6864349842071533,
  0.6841471195220947,
  0.6810715198516846,
  0.6780992150306702,
  0.6750442385673523,
  0.672359824180603,
  0.6691939234733582,
  0.6670226454734802,
  0.6632363796234131,
  0.6604923605918884,
  0.656695544719696,
  0.6536340117454529,
  0.6515941619873047,
  0.6489331126213074,
  0.6463342308998108,
  0.6435288786888123,
  0.6406691670417786,
  0.6385700106620789,
  0.6355755925178528,
  0.6325638294219971,
  0.6300475597381592,
  0.6277742981910706,
  0.6248413920402527,
  0.6220954656600952,
  0.618781328201294,
  0.6163890361785889,
  0.6133154034614563,
  0.6107847094535828,
  0.6076008677482605,
  0.6049020290374756,
  0.6015161871910095,
  0.5979748368263245,
  0.5950707197189331,
  0.5912054181098938,
  0.5875070095062256],
 'val_accuracy': [0.1666666716337204,
  0.17499999701976776,
  0.2666666805744171,
  0.2916666567325592,
  0.3583333194255829,
  0.38333332538604736,
  0.3583333194255829,
  0.38333332538604736,
  0.38333332538604736,
  0.38333332538604736,
  0.3583333194255829,
  0.3583333194255829,
  0.3916666805744171,
  0.38333332538604736,
  0.4000000059604645,
  0.4000000059604645,
  0.42500001192092896,
  0.44999998807907104,
  0.46666666865348816,
  0.4583333432674408,
  0.5,
  0.5083333253860474,
  0.5333333611488342,
  0.5333333611488342,
  0.550000011920929,
  0.5583333373069763,
  0.5583333373069763,
  0.5416666865348816,
  0.5916666388511658,
  0.6000000238418579,
  0.5833333134651184,
  0.6083333492279053,
  0.6166666746139526,
  0.6333333253860474,
  0.6416666507720947,
  0.6499999761581421,
  0.6499999761581421,
  0.6666666865348816,
  0.675000011920929,
  0.699999988079071,
  0.7166666388511658,
  0.7250000238418579,
  0.7250000238418579,
  0.7333333492279053,
  0.7333333492279053,
  0.7166666388511658,
  0.7166666388511658,
  0.7250000238418579,
  0.7250000238418579,
  0.7250000238418579,
  0.7333333492279053,
  0.7250000238418579,
  0.7250000238418579,
  0.7333333492279053,
  0.7416666746139526,
  0.7416666746139526,
  0.7416666746139526,
  0.7416666746139526,
  0.7416666746139526,
  0.7416666746139526,
  0.75,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7749999761581421,
  0.7749999761581421,
  0.7749999761581421,
  0.7749999761581421,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7666666507720947,
  0.7583333253860474,
  0.7583333253860474,
  0.7583333253860474,
  0.7583333253860474,
  0.7583333253860474,
  0.7583333253860474]}
Now visualize the loss over time using history.history:

# The history.history["loss"] entry is a dictionary with as many values as epochs that the
# model was trained on. 
df_loss_acc = pd.DataFrame(history.history)
df_loss= df_loss_acc[['loss','val_loss']]
df_loss.rename(columns={'loss':'train','val_loss':'validation'},inplace=True)
df_acc= df_loss_acc[['accuracy','val_accuracy']]
df_acc.rename(columns={'accuracy':'train','val_accuracy':'validation'},inplace=True)
df_loss.plot(title='Model loss',figsize=(12,8)).set(xlabel='Epoch',ylabel='Loss')
df_acc.plot(title='Model Accuracy',figsize=(12,8)).set(xlabel='Epoch',ylabel='Accuracy')
[Text(0, 0.5, 'Accuracy'), Text(0.5, 0, 'Epoch')]


Congratulations! You've finished the assignment and built two models: One that recognizes smiles, and another that recognizes SIGN language with almost 80% accuracy on the test set. In addition to that, you now also understand the applications of two Keras APIs: Sequential and Functional. Nicely done!

By now, you know a bit about how the Functional API works and may have glimpsed the possibilities. In your next assignment, you'll really get a feel for its power when you get the opportunity to build a very deep ConvNet, using ResNets!


6 - Bibliography
You're always encouraged to read the official documentation. To that end, you can find the docs for the Sequential and Functional APIs here:

https://www.tensorflow.org/guide/keras/sequential_model

https://www.tensorflow.org/guide/keras/functional

